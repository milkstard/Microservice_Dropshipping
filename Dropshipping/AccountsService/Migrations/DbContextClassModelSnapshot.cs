// <auto-generated />
using System;
using AccountsService.Helper;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AccountsService.Migrations
{
    [DbContext(typeof(DbContextClass))]
    partial class DbContextClassModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AccountsService.Models.UserSalt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("UserSalts");
                });

            modelBuilder.Entity("AccountsService.Models.UserTypes", b =>
                {
                    b.Property<string>("TypeName")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("TypeName");

                    b.HasKey("TypeName");

                    b.ToTable("UserTypes");
                });

            modelBuilder.Entity("AccountsService.Models.Users", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Birth_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Confirmed_password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contact_no")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Updated_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserSaltId")
                        .HasColumnType("int")
                        .HasColumnName("UserSaltID_FK");

                    b.Property<string>("UserTypeFK")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("UserType_FK");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("UserSaltId")
                        .IsUnique();

                    b.HasIndex("UserTypeFK");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AccountsService.Models.Users", b =>
                {
                    b.HasOne("AccountsService.Models.UserSalt", "UserSalt")
                        .WithOne("User")
                        .HasForeignKey("AccountsService.Models.Users", "UserSaltId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AccountsService.Models.UserTypes", "UserType")
                        .WithMany("Users")
                        .HasForeignKey("UserTypeFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserSalt");

                    b.Navigation("UserType");
                });

            modelBuilder.Entity("AccountsService.Models.UserSalt", b =>
                {
                    b.Navigation("User")
                        .IsRequired();
                });

            modelBuilder.Entity("AccountsService.Models.UserTypes", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
